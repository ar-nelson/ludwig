namespace Ludwig;

enum Vote : byte { Upvote = 1, NoVote = 0, Downvote = -1 }

enum SortType : ubyte {
  Active,
  Hot,
  New,
  Old,
  MostComments,
  NewComments,
  TopAll,
  TopYear,
  TopSixMonths,
  TopThreeMonths,
  TopMonth,
  TopWeek,
  TopDay,
  TopTwelveHour,
  TopSixHour,
  TopHour
}

enum CommentSortType : ubyte { Hot, New, Old, Top }

enum UserPostSortType : ubyte { New, Old, Top }

enum BoardSortType : ubyte { New, Old, MostSubscribers, MostPosts, NewPosts }

enum UserSortType : ubyte { New, Old, MostPosts, NewPosts }

enum ModState : ubyte {
  Approved = 1,
  Normal = 2,
  Flagged = 3,
  Locked = 4,
  Unapproved = 5,
  Removed = 6
}

table RichTextImage {
  src: string (required);
  alt: string;
}

union RichText {
  Text: string,
  Emoji: string,
  Link: string,
  UserLink: string,
  BoardLink: string,
  Image: RichTextImage
}

table Session {
  user: uint64;
  ip: string;
  user_agent: string;
  created_at: uint64;
  expires_at: uint64;
  remember: bool = false;
}

table User {
  name: string (required);
  display_name: [RichText];
  bio_raw: string;
  bio: [RichText];
  actor_id: string;
  inbox_url: string;
  matrix_user_id: string;
  instance: uint64 = 0;
  created_at: uint64;
  updated_at: uint64 = null;
  fetched_at: uint64 = null;
  deleted_at: uint64 = null;
  salt: uint32; // random, will be used to generate hashes in vote activity URLs
  avatar_url: string;
  banner_url: string;
  bot: bool = false;
  mod_state: ModState = Normal;
  mod_reason: string;
}

table UserStats {
  thread_count: uint64 = 0;
  comment_count: uint64 = 0;
  thread_karma: int64 = 0;
  comment_karma: int64 = 0;
  latest_post_time: uint64 = 0;
  latest_post_id: uint64 = 0;
}

struct Hash {
  bytes: [ubyte:32];
}

struct Salt {
  bytes: [ubyte:16];
}

table LocalUser {
  email: string;
  password_hash: Hash;
  password_salt: Salt;
  admin: bool = false;
  accepted_application: bool = false;
  email_verified: bool = false;
  invite: uint64 = 0;
  open_links_in_new_tab: bool = false;
  send_notifications_to_email: bool = false;
  show_avatars: bool = true;
  show_images_threads: bool = true;
  show_images_comments: bool = true;
  show_bot_accounts: bool = true;
  show_new_post_notifs: bool = true;
  hide_cw_posts: bool = false;
  expand_cw_posts: bool = false;
  expand_cw_images: bool = false;
  show_read_posts: bool = true;
  show_karma: bool = true;
  javascript_enabled: bool = true;
  infinite_scroll_enabled: bool = true;
  collapse_posts_below_score: int64 = null;
  theme: uint64 = 0;
  lemmy_theme: string;
  default_sort_type: SortType = Active;
  default_comment_sort_type: CommentSortType = Hot;
}

table LocalUserStats {
  unread_reply_count: uint32 = 0;
  unread_mention_count: uint32 = 0;
  unread_dm_count: uint32 = 0;
  unread_notification_count: uint32 = 0;
}

enum NotificationType : ubyte {
  ReplyToThread,
  ReplyToComment,
  MentionInThread,
  MentionInComment,
  BoostThread,
  BoostComment,
  Follow,
  ApproveSubscription,
  BecomeMod,
  FollowedUserRemoved,
  FollowedUserDefererated,
  SubscribedBoardRemoved,
  SubscribedBoardDefederated
}

table Notification {
  type: NotificationType;
  user: uint64;
  created_at: uint64;
  read_at: uint64 = null;
  subject: uint64 = null;
}

table Application {
  text: string (required);
  ip: string;
  user_agent: string;
}

table Board {
  name: string (required);
  display_name: [RichText];
  actor_id: string;
  inbox_url: string;
  followers_url: string;
  instance: uint64 = 0;
  created_at: uint64;
  updated_at: uint64 = null;
  fetched_at: uint64 = null;
  deleted_at: uint64 = null;
  description_raw: string;
  description: [RichText];
  icon_url: string;
  banner_url: string;
  content_warning: string;
  restricted_posting: bool = false;
  approve_subscribe: bool = false;
  can_upvote: bool = true;
  can_downvote: bool = true;
  default_sort_type: SortType = Active;
  default_comment_sort_type: CommentSortType = Hot;
  mod_state: ModState = Normal;
  mod_reason: string;
}

table BoardStats {
  thread_count: uint64 = 0;
  comment_count: uint64 = 0;
  latest_post_time: uint64 = 0;
  latest_post_id: uint64 = 0;
  subscriber_count: uint64 = 0;
}

table LocalBoard {
  owner: uint64;
  federated: bool = true;
  private: bool = false;
  invite_required: bool = false;
  invite_mod_only: bool = false;
}

enum MediaCategory : ubyte { Image, Audio, Video }

table Thread {
  author: uint64;
  board: uint64;
  title: [RichText];
  created_at: uint64;
  updated_at: uint64 = null;
  fetched_at: uint64 = null;
  deleted_at: uint64 = null;
  instance: uint64 = 0;
  salt: uint32; // random, will be used to generate hashes in vote activity URLs
  activity_url: string;
  original_post_url: string;
  content_url: string;
  content_text_raw: string;
  content_text: [RichText];
  content_warning: string;
  featured: bool;
  mod_state: ModState = Normal;
  mod_reason: string;
  board_mod_state: ModState = Normal;
  board_mod_reason: string;
}

table PostStats {
  latest_comment: uint64 = 0;
  latest_comment_necro: uint64 = 0;
  descendant_count: uint64 = 0;
  child_count: uint64 = 0;
  upvotes: uint64 = 0;
  downvotes: uint64 = 0;
  karma: int64 = 0;
}

table Comment {
  author: uint64;
  parent: uint64;
  thread: uint64;
  created_at: uint64;
  updated_at: uint64 = null;
  fetched_at: uint64 = null;
  deleted_at: uint64 = null;
  instance: uint64 = 0;
  salt: uint32; // random, will be used to generate hashes in vote activity URLs
  activity_url: string;
  original_post_url: string;
  content_raw: string;
  content: [RichText] (required);
  content_warning: string;
  distinguished: bool = false;
  mod_state: ModState = Normal;
  mod_reason: string;
  board_mod_state: ModState = Normal;
  board_mod_reason: string;
}

table DirectMessage {
  author: uint64;
  recipient: uint64;
  created_at: uint64;
  updated_at: uint64 = null;
  read_at: uint64 = null;
  deleted_at: uint64 = null;
  original_post_url: string;
  activity_url: string;
  content_raw: string;
  content: [RichText] (required);
}

table LinkCard {
  fetch_complete: bool = false;
  fetch_tries: ubyte = 0;
  last_fetch_at: uint64 = null;
  media_category: MediaCategory = null;
  title: string;
  description: string;
  image_url: string;
}

table Media {
  category: MediaCategory;
  mimetype: string;
  alt: string;
  blurhash: string;
}

table ModActionEdit {
  old_value: string;
  new_value: string;
}

table ModActionSetState {
  old_value: ModState = Normal;
  new_value: ModState = Normal;
}

table ModActionPurge {
  also_purged: [uint64];
}

union ModAction {
  ModActionEdit,
  ModActionSetState,
  ModActionPurge
}

enum ModActionTargetType : byte {
  User,
  Board,
  Thread,
  Comment
}

table ModActionRecord {
  mod: uint64;
  timestamp: uint64;
  target_type: ModActionTargetType;
  target: uint64;
  action: ModAction (required);
}

table Report {
  post: uint64;
  author: uint64;
  created_at: uint64;
  content: string;
}

table Invite {
  created_at: uint64;
  expires_at: uint64;
  from: uint64;
  accepted_at: uint64 = null;
  to: uint64 = null;
}

table SiteStats {
  user_count: uint64;
  board_count: uint64;
  thread_count: uint64;
  comment_count: uint64;
}

table SettingRecord {
  key: string (required);
  value_int: uint64 = null;
  value_str: string;
}

table VoteBatch {
  posts: [uint64];
}

table SubscriptionBatch {
  boards: [uint64];
}

enum DumpType : ubyte {
  User,
  LocalUser,
  Board,
  LocalBoard,
  Thread,
  Comment,
  Notification,
  DirectMessage,
  Application,
  Invite,
  SettingRecord,
  UpvoteBatch,
  DownvoteBatch,
  SubscriptionBatch
}

table Dump {
  id: uint64;
  type: DumpType;
  data: [ubyte]; // nested flatbuffer, type is determined by `type`
}

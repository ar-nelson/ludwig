namespace Ludwig.Lemmy;

table AddAdmin {
  auth: string;
  person_id: uint64;
  added: bool;
}

table PersonAggregates {
  id: uint64;
  person_id: uint64;
  comment_count: uint64;
  post_count: uint64;
  comment_score: int64;
  post_score: int64;
}

table Person {
  id: uint64;
  instance_id: uint64;
  name: string (required);
  actor_id: string (required);
  inbox_url: string (required);
  published: string (required); // timestamp
  updated: string; // timestamp
  ban_expires: string; // timestamp
  avatar: string;
  banner: string;
  bio: string;
  display_name: string;
  matrix_user_id: string;
  admin: bool;
  banned: bool;
  bot_account: bool;
  deleted: bool;
  local: bool = true;
}

table PersonView {
  counts: PersonAggregates (required);
  person: Person (required);
}

table AddAdminResponse {
  admins: [PersonView];
}

table AddModToCommunity {
  auth: string;
  person_id: uint64;
  community_id: uint64;
  added: bool;
}

table Community {
  id: uint64;
  instance_id: uint64;
  name: string (required);
  title: string (required);
  actor_id: string (required);
  followers_url: string (required);
  inbox_url: string (required);
  published: string (required); // timestamp
  updated: string; // timestamp
  icon: string;
  banner: string;
  description: string;
  display_name: string;
  deleted: bool;
  hidden: bool;
  nsfw: bool;
  local: bool = true;
  posting_restricted_to_mods: bool;
  removed: bool;
}

table CommunityModeratorView {
  community: Community (required);
  moderator: Person (required);
}

table AddModToCommunityResponse {
  moderators: [CommunityModeratorView];
}

// TODO: AdminPurgeComment
// TODO: AdminPurgeCommentView
// TODO: AdminPurgeCommunity
// TODO: AdminPurgeCommunityView
// TODO: AdminPurgePerson
// TODO: AdminPurgePersonView
// TODO: AdminPurgePost
// TODO: AdminPurgePersonView
// TODO: ApproveRegistrationApplication
// TODO: BanFromCommunity
// TODO: BanFromCommunityResponse
// TODO: BanPerson
// TODO: BanPersonResponse
// TODO: BannedPersonsResponse

table BlockInstance {
  instance_id: uint64;
  block: bool;
}

table BlockInstanceResponse {
  blocked: bool;
}

// TODO: CaptchaResponse

table ChangePassword {
  auth: string;
  new_password: string (required);
  new_password_verify: string (required);
  old_password: string (required);
}

table Comment {
  id: uint64;
  creator_id: uint64;
  language_id: uint64;
  post_id: uint64;
  ap_id: string (required);
  content: string (required);
  path: string (required);
  published: string (required); // timestamp
  updated: string; // timestamp
  deleted: bool;
  distinguished: bool;
  local: bool = true;
  removed: bool;
}

table CommentAggregates {
  id: uint64;
  comment_id: uint64;
  child_count: uint64;
  upvotes: uint64;
  downvotes: uint64;
  score: int64;
  hot_rank: float64;
  published: string (required); // timestamp
}

table CommentReply {
  id: uint64;
  comment_id: uint64;
  recipient_id: uint64;
  published: string (required); // timestamp
  read: bool;
}

table Post {
  id: uint64;
  community_id: uint64;
  creator_id: uint64;
  language_id: uint64;
  name: string (required);
  ap_id: string (required);
  published: string (required); // timestamp
  updated: string; // timestamp
  body: string;
  embed_description: string;
  embed_title: string;
  embed_video_url: string;
  thumbnail_url: string;
  url: string;
  deleted: bool;
  featured_community: bool;
  featured_local: bool;
  local: bool = true;
  locked: bool;
  nsfw: bool;
  removed: bool;
}

table CommentReplyView {
  comment: Comment (required);
  comment_reply: CommentReply (required);
  community: Community (required);
  counts: CommentAggregates (required);
  creator: Person (required);
  recipient: Person (required);
  post: Post (required);
  subscribed: string (required); // enum SubscribedType
  creator_banned_from_community: bool;
  creator_blocked: bool;
  saved: bool;
  my_vote: byte = null;
}

table CommentReplyResponse {
  comment_reply_view: CommentReplyView (required);
}

// TODO: CommentReport
// TODO: CommentReportResponse
// TODO: CommentReportView

table CommentView {
  comment: Comment (required);
  community: Community (required);
  counts: CommentAggregates (required);
  creator: Person (required);
  post: Post (required);
  subscribed: string (required); // enum SubscribedType
  creator_banned_from_community: bool;
  creator_blocked: bool;
  saved: bool;
  my_vote: byte = null;
}

table CommentResponse {
  comment_view: CommentView (required);
  form_id: string;
  recipient_ids: [uint64];
}

table CommunityAggregates {
  id: uint64;
  community_id: uint64;
  comments: uint64;
  posts: uint64;
  subscribers: uint64;
  users_active_half_year: uint32;
  users_active_month: uint32;
  users_active_week: uint32;
  users_active_day: uint32;
  hot_rank: float64;
  published: string (required); // timestamp
}

table CommunityBlockView {
  community: Community (required);
  person: Person (required);
}

table CommunityFollowerView {
  community: Community (required);
  follower: Person (required);
}

table CommunityJoin {
  community_id: uint64;
}

table CommunityJoinResponse {
  joined: bool;
}

table CommunityView {
  community: Community (required);
  counts: CommunityAggregates (required);
  blocked: bool;
  subscribed: string (required); // enum SubscribedType
}

table CommunityResponse {
  community_view: CommunityView (required);
  discussion_languages: [uint64];
}

// All CreateFoo tables are renamed DoCreateFoo to avoid name collisions with
// flatbuffers' autogenerated Create functions.

table DoCreateComment {
  id: uint64;
  auth: string;
  content: string (required);
  post_id: uint64;
  form_id: string;
  language_id: uint64 = null;
  parent_id: uint64 = null;
}

table DoCreateCommentLike {
  auth: string;
  comment_id: uint64;
  score: byte;
}

// TODO: CreateCommentReport

table DoCreateCommunity {
  auth: string;
  name: string (required);
  title: string (required);
  discussion_languages: [uint64];
  banner: string;
  description: string;
  icon: string;
  nsfw: bool;
  posting_restricted_to_mods: bool;
}

// TODO: CreateCustomEmoji

table DoCreatePost {
  auth: string;
  name: string (required);
  community_id: uint64;
  body: string;
  honeypot: string;
  url: string;
  language_id: uint64 = null;
  nsfw: bool;
}

table DoCreatePostLike {
  auth: string;
  post_id: uint64;
  score: byte;
}

// TODO: CreatePostReport
// TODO: CreatePrivateMessage
// TODO: CreatePrivateMessageReport

table DoCreateSite {
  auth: string;
  name: string (required);
  sidebar: string;
  description: string;
  icon: string;
  banner: string;
  enable_downvotes: bool = null;
  enable_nsfw: bool = null;
  community_creation_admin_only: bool = null;
  require_email_verification: bool = null;
  application_question: string;
  private_instance: bool = null;
  default_theme: string;
  default_post_listing_type: string; // enum ListingType
  legal_information: string;
  application_email_admins: bool = null;
  hide_modlog_mod_names: bool = null;
  discussion_languages: [uint64];
  slur_filter_regex: string;
  actor_name_max_length: uint64 = null;
  rate_limit_message: uint64 = null;
  rate_limit_message_per_second: uint64 = null;
  rate_limit_post: uint64 = null;
  rate_limit_post_per_second: uint64 = null;
  rate_limit_register: uint64 = null;
  rate_limit_register_per_second: uint64 = null;
  rate_limit_image: uint64 = null;
  rate_limit_image_per_second: uint64 = null;
  rate_limit_comment: uint64 = null;
  rate_limit_comment_per_second: uint64 = null;
  rate_limit_search: uint64 = null;
  rate_limit_search_per_second: uint64 = null;
  federation_enabled: bool = null;
  federation_debug: bool = null;
  captcha_enabled: bool = null;
  captcha_difficulty: string;
  allowed_instances: [string];
  blocked_instances: [string];
  taglines: [string];
  registration_mode: string; // enum RegistrationMode
}

table CustomEmoji {
  id: uint64;
  local_site_id: uint64;
  shortcode: string (required);
  image_url: string (required);
  alt_text: string (required);
  category: string (required);
  published: string (required); // timestamp
  updated: string; // timestamp
}

table CustomEmojiKeyword {
  custom_emoji_id: uint64;
  keyword: string (required);
}

// TODO: CustomEmojiResponse

table CustomEmojiView {
  custom_emoji: CustomEmoji (required);
  keywords: [CustomEmojiKeyword];
}

table DeleteAccount {
  auth: string;
  password: string (required);
}

table DeleteComment {
  auth: string;
  comment_id: uint64;
  deleted: bool = true;
}

table DeleteCommunity {
  auth: string;
  community_id: uint64;
  deleted: bool = true;
}

// TODO: DeleteCustomEmoji
// TODO: DeleteCustomEmojiResponse

table DeletePost {
  auth: string;
  post_id: uint64;
  deleted: bool = true;
}

// TODO: DeletePrivateMessage
// TODO: DistinguishComment

table EditComment {
  auth: string;
  comment_id: uint64;
  content: string;
  form_id: string;
  language_id: uint64 = null;
}

table EditCommunity {
  auth: string;
  community_id: uint64;
  banner: string;
  description: string;
  icon: string;
  title: string;
  discussion_languages: [uint64];
  nsfw: bool;
  posting_restricted_to_mods: bool;
}

// TODO: EditCustomEmoji

table EditPost {
  auth: string;
  post_id: uint64;
  body: string;
  name: string;
  url: string;
  nsfw: bool;
  language_id: uint64 = null;
}

// TODO: EditPrivateMessage

table EditSite {
  auth: string;
  name: string;
  sidebar: string;
  description: string;
  icon: string;
  banner: string;
  enable_downvotes: bool = null;
  enable_nsfw: bool = null;
  community_creation_admin_only: bool = null;
  require_email_verification: bool = null;
  application_question: string;
  private_instance: bool = null;
  default_theme: string;
  default_post_listing_type: string; // enum ListingType
  legal_information: string;
  application_email_admins: bool = null;
  hide_modlog_mod_names: bool = null;
  discussion_languages: [uint64];
  slur_filter_regex: string;
  actor_name_max_length: uint64 = null;
  rate_limit_message: uint64 = null;
  rate_limit_message_per_second: uint64 = null;
  rate_limit_post: uint64 = null;
  rate_limit_post_per_second: uint64 = null;
  rate_limit_register: uint64 = null;
  rate_limit_register_per_second: uint64 = null;
  rate_limit_image: uint64 = null;
  rate_limit_image_per_second: uint64 = null;
  rate_limit_comment: uint64 = null;
  rate_limit_comment_per_second: uint64 = null;
  rate_limit_search: uint64 = null;
  rate_limit_search_per_second: uint64 = null;
  federation_enabled: bool = null;
  federation_debug: bool = null;
  captcha_enabled: bool = null;
  captcha_difficulty: string;
  allowed_instances: [string];
  blocked_instances: [string];
  taglines: [string];
  registration_mode: string; // enum RegistrationMode
  reports_email_admins: bool = null;
}

// TODO: FeaturePost
// TODO: FederatedInstances

table FollowCommunity {
  auth: string;
  community_id: uint64;
  follow: bool = true;
}

// TODO: GetCaptchaResponse

table GetCommentsResponse {
  comments: [CommentView];
}

table GetCommunityResponse {
  community_view: CommunityView;
  discussion_languages: [uint64];
  moderators: [CommunityModeratorView];
  //site: Site;
}

// TODO: GetFederatedInstancesResponse
// TODO: GetModlogResponse

table PostAggregates {
  id: uint64;
  post_id: uint64;
  comments: uint64;
  upvotes: uint64;
  downvotes: uint64;
  score: int64;
  hot_rank: float64;
  hot_rank_active: float64;
  published: string (required); // timestamp
  newest_comment_time: string (required); // timestamp
  newest_comment_time_necro: string (required); // timestamp
  featured_community: bool;
  featured_local: bool;
}

table PostView {
  community: Community (required);
  counts: PostAggregates (required);
  creator: Person (required);
  post: Post (required);
  unread_comments: uint64;
  creator_banned_from_community: bool;
  creator_blocked: bool;
  read: bool;
  saved: bool;
  subscribed: string (required); // enum SubscribedType
  my_vote: byte = null;
}

table GetPersonDetailsResponse {
  person_view: PersonView (required);
  comments: [CommentView];
  moderates: [CommunityModeratorView];
  posts: [PostView];
}

table PersonMention {
  id: uint64;
  comment_id: uint64;
  recipient_id: uint64;
  published: string (required); // timestamp
  read: bool;
}

table PersonMentionView {
  comment: Comment (required);
  community: Community (required);
  counts: CommentAggregates (required);
  creator: Person (required);
  person_mention: PersonMention (required);
  post: Post (required);
  creator_blocked: bool;
  creator_banned_from_community: bool;
  saved: bool;
  subscribed: string (required); // enum SubscribedType
  my_vote: byte = null;
}

table GetPersonMentionsResponse {
  mentions: [PersonMentionView];
}

table GetPostResponse {
  community_view: CommunityView (required);
  post_view: PostView (required);
  cross_posts: [PostView];
  moderators: [CommunityModeratorView];
}

table GetPostsResponse {
  posts: [PostView];
}

// TODO: GetPrivateMessages

table GetRepliesResponse {
  replies: [CommentReplyView];
}

// TODO: GetReportCountResponse
// TODO: GetSiteMetadataResponse

table GetSiteResponse {
  site_view: SiteView (required);
  admins: [PersonView];
  version: string (required);
  my_user: MyUserInfo;
  all_languages: [Language];
  discussion_languages: [uint64];
  taglines: [Tagline];
  custom_emojis: [CustomEmojiView];
}

// TODO: GetUnreadCountResponse
// TODO: GetUnreadRegistrationApplicationCountResponse

table HideCommunity {
  auth: string;
  community_id: uint64;
  hidden: bool;
  reason: string;
}

table ImageFile {
  file: string (required);
  delete_token: string (required);
}

table Instance {
  id: uint64;
  domain: string (required);
  published: string (required); // timestamp
  updated: string; // timestamp
  software: string;
  version: string;
}

table Language {
  id: uint64;
  code: string (required);
  name: string (required);
}

// TODO: LeaveAdmin
// TODO: ListCommentReportsResponse

table ListCommunitiesResponse {
  communities: [CommunityView];
}

// TODO: ListPostReports
// TODO: ListPostReportsResponse
// TODO: ListPrivateMessageReports
// TODO: ListPrivateMessageReportsResponse
// TODO: ListRegistrationApplications
// TODO: ListRegistrationApplicationsResponse

table LocalSite {
  id: uint64;
  site_id: uint64;
  site_setup: bool;
  enable_downvotes: bool;
  enable_nsfw: bool;
  community_creation_admin_only: bool;
  require_email_verification: bool;
  application_question: string;
  private_instance: bool;
  default_theme: string (required);
  default_post_listing_type: string (required); // enum ListingType
  legal_information: string;
  hide_modlog_mod_names: bool;
  application_email_admins: bool;
  slur_filter_regex: string;
  actor_name_max_length: uint64;
  federation_enabled: bool;
  captcha_enabled: bool;
  captcha_difficulty: string (required);
  published: string (required); // timestamp
  updated: string; // timestamp
  registration_mode: string (required); // enum RegistrationMode
  reports_email_admins: bool;
  federation_signed_fetch: bool;
}

table LocalSiteRateLimit {
  local_site_id: uint64;
  message: uint64;
  message_per_second: uint64;
  post: uint64;
  post_per_second: uint64;
  register: uint64;
  register_per_second: uint64;
  image: uint64;
  image_per_second: uint64;
  comment: uint64;
  comment_per_second: uint64;
  search: uint64;
  search_per_second: uint64;
  published: string (required); // timestamp
  updated: string; // timestamp
  import_user_settings: uint64;
  import_user_settings_per_second: uint64;
}

table LocalUser {
  id: uint64;
  person_id: uint64;
  interface_language: string (required);
  theme: string (required);
  validator_time: string (required); // timestamp
  email: string;
  totp_2fa_url: string;
  accepted_application: bool;
  email_verified: bool;
  open_links_in_new_tab: bool;
  send_notifications_to_email: bool;
  show_avatars: bool;
  show_bot_accounts: bool;
  show_new_post_notifs: bool;
  show_nsfw: bool;
  show_read_posts: bool;
  show_scores: bool;
  default_listing_type: string (required); // enum ListingType
  default_sort_type: string (required); // enum SortType
}

table LocalUserView {
  local_user: LocalUser (required);
  person: Person (required);
  counts: PersonAggregates (required);
}

// TODO: LockPost

table Login {
  username_or_email: string (required);
  password: string (required);
  totp_2fa_token: string;
}

table LoginResponse {
  jwt: string (required);
  registration_created: bool;
  verify_email_sent: bool;
}

table MarkAllAsRead {
  auth: string;
}

table MarkCommentReplyAsRead {
  auth: string;
  comment_reply_id: uint64;
  read: bool;
}

table MarkPersonMentionAsRead {
  auth: string;
  person_mention_id: uint64;
  read: bool;
}

table MarkPostAsRead {
  auth: string;
  post_id: uint64;
  read: bool;
}

// TODO: MarkPrivateMessageAsRead
// TODO: ModAdd
// TODO: ModAddCommunity
// TODO: ModAddCommunityView
// TODO: ModAddView
// TODO: ModBan
// TODO: ModBanFromCommunity
// TODO: ModBanFromCommunityView
// TODO: ModBanView
// TODO: ModFeaturePost
// TODO: ModFeaturePostView
// TODO: ModHideCommunity
// TODO: ModHideCommunityView
// TODO: ModJoin
// TODO: ModJoinResponse
// TODO: ModLockPost
// TODO: ModLockPostView
// TODO: ModRemoveComment
// TODO: ModRemoveCommentView
// TODO: ModRemoveCommunity
// TODO: ModRemoveCommunityView
// TODO: ModRemovePost
// TODO: ModRemovePostView
// TODO: ModTransferCommunity
// TODO: ModTransferCommunityView
// TODO: ModlogListParams

table PersonBlockView {
  person: Person (required);
  target: Person (required);
}

table MyUserInfo {
  local_user_view: LocalUserView (required);
  community_blocks: [CommunityBlockView];
  discussion_languages: [uint64];
  follows: [CommunityFollowerView];
  moderates: [CommunityModeratorView];
  person_blocks: [PersonBlockView];
}

table PasswordChangeAfterReset {
  password: string (required);
  password_verify: string (required);
  token: string (required);
}

table PasswordReset {
  email: string (required);
}

table PersonMentionResponse {
  person_mention_view: PersonMentionView (required);
}

table PostJoin {
  post_id: uint64;
}

table PostJoinResponse {
  joined: bool = true;
}

// TODO: PostReport
// TODO: PostReportResponse
// TODO: PostReportView

table PostResponse {
  post_view: PostView (required);
}

// TODO: PrivateMessage
// TODO: PrivateMessageReport
// TODO: PrivateMessageReportResponse
// TODO: PrivateMessageReportView
// TODO: PrivateMessageResponse
// TODO: PrivateMessageView
// TODO: PrivateMessagesResponse
// TODO: PurgeComment
// TODO: PurgeCommunity
// TODO: PurgeItemResponse
// TODO: PurgePerson
// TODO: PurgePost

table Register {
  username: string (required);
  password: string (required);
  password_verify: string (required);
  email: string;
  answer: string;
  captcha_answer: string;
  captcha_uuid: string;
  honeypot: string;
  show_nsfw: bool;
}

// TODO: RegistrationApplication
// TODO: RegistrationApplicationResponse
// TODO: RegistrationApplicationView
// TODO: RemoveComment
// TODO: RemoveCommunity
// TODO: RemovePost
// TODO: ResolveCommentReport
// TODO: ResolveObject
// TODO: ResolveObjectResponse
// TODO: ResolvePostReport
// TODO: ResolvePrivateMessageReport

table SaveComment {
  auth: string;
  comment_id: uint64;
  save_: bool = true;
}

table SavePost {
  auth: string;
  post_id: uint64;
  save_: bool = true;
}

table SaveUserSettings {
  auth: string;
  show_nsfw: bool = null;
  blur_nsfw: bool = null;
  auto_expand: bool = null;
  show_scores: bool = null;
  theme: string;
  default_sort_type: string; // enum SortType
  default_listing_type: string; // enum ListingType
  interface_language: string;
  avatar: string;
  banner: string;
  display_name: string;
  email: string;
  bio: string;
  matrix_user_id: string;
  show_avatars: bool = null;
  send_notifications_to_email: bool = null;
  bot_account: bool = null;
  show_bot_accounts: bool = null;
  show_read_posts: bool = null;
  discussion_languages: [uint64];
  open_links_in_new_tab: bool = null;
  infinite_scroll_enabled: bool = null;
  post_listing_mode: string; // List, Card, SmallCard
  enable_keyboard_navigation: bool = null;
  enable_animated_images: bool = null;
  collapse_bot_comments: bool = null;
}

table Search {
  q: string (required);
  auth: string;
  community_name: string;
  community_id: uint64 = null;
  creator_id: uint64 = null;
  limit: uint16 = null;
  page: uint16 = null;
  listing_type: string; // enum ListingType
  sort: string; // enum SortType
  type_: string; // enum SearchType
}

table SearchResponse {
  comments: [CommentView];
  communities: [CommunityView];
  posts: [PostView];
  users: [PersonView];
  type_: string (required); // enum SearchType
}

table Site {
  id: uint64;
  name: string (required);
  sidebar: string;
  published: string (required); // timestamp
  updated: string;
  icon: string;
  banner: string;
  description: string;
  actor_id: string (required);
  last_refreshed_at: string (required); // timestamp
  inbox_url: string (required);
  private_key: string;
  public_key: string (required);
  instance_id: uint64;
}

table SiteAggregates {
  site_id: uint64;
  users: uint64;
  posts: uint64;
  comments: uint64;
  communities: uint64;
  users_active_day: uint32;
  users_active_week: uint32;
  users_active_month: uint32;
  users_active_half_year: uint32;
}

// TODO: SiteMetadata

table SiteResponse {
  site_view: SiteView (required);
  taglines: [Tagline];
}

table SiteView {
  site: Site (required);
  local_site: LocalSite (required);
  local_site_rate_limit: LocalSiteRateLimit (required);
  counts: SiteAggregates (required);
}

table Tagline {
  id: uint64;
  local_site_id: uint64;
  content: string (required);
  published: string (required); // timestamp
  updated: string; // timestamp
}

// TODO: TransferCommunity

table UploadImageResponse {
  msg: string (required);
  url: string;
  delete_url: string;
  files: [ImageFile];
}

table UserJoin {
  auth: string;
}

table UserJoinResponse {
  joined: bool = true;
}

table VerifyEmail {
  token: string (required);
}

table Error {
  error: string (required);
  status: uint16;
}

namespace Ludwig;

enum ModState : ubyte { Visible, Flagged, Hidden, Removed }

table User {
  name: string (required);
  display_name: string;
  instance: uint64 = null;
  created_at: uint64;
  updated_at: uint64 = null;
  deleted_at: uint64 = null;
  avatar_media: uint64 = null;
  bot: bool = false;
  mod_state: ModState = Visible;
}

table LocalUser {
  email: string;
  password_hash: uint64;
  password_salt: uint64;
}

table Board {
  name: string (required);
  display_name: string;
  instance: uint64 = null;
  created_at: uint64;
  updated_at: uint64 = null;
  description: string;
  sidebar: string;
  avatar_media: uint64 = null;
  banner_media: uint64 = null;
  nsfw: bool = false;
  can_upvote: bool = true;
  can_downvote: bool = true;
  invite_only: bool = false;
  mod_state: ModState = Visible;
}

table LocalBoard {
  owner: uint64;
  federated: bool = true;
  private: bool = false;
}

table Page {
  author: uint64;
  board: uint64;
  title: string (required);
  created_at: uint64;
  updated_at: uint64 = null;
  instance: uint64 = null;
  original_url: string;
  url: string;
  text: string;
  nsfw: bool = false;
  mod_state: ModState = Visible;
}

table Note {
  author: uint64;
  parent: uint64;
  created_at: uint64;
  updated_at: uint64 = null;
  instance: uint64 = null;
  original_url: string;
  content: string;
  mod_state: ModState = Visible;
}

enum MediaCategory : ubyte { Image, Audio, Video }

table Media {
  category: MediaCategory;
  mimetype: string;
  alt: string;
}

enum ModActionType : byte {
  EditPost,
  HidePost,
  RemovePost,
  PurgePost,

  EditBoard,
  RemoveBoard,
  PurgeBoard,

  EditUser,
  TempBanUserFromBoard,
  PermBanUserFromBoard,
  TemBanUserFromInstance,
  PermBanUserFromInstance,
  PurgeUser
}

table ModAction {
  type: ModActionType;
  author: uint64;
  target: uint64;
  content: string;
}

table Report {
  post: uint64;
  author: uint64;
  created_at: uint64;
  content: string;
}

enum InviteRole : ubyte {
  JoinInstance,
  JoinBoard,
  AdminInstance,
  ModInstance,
  ModBoard
}

table invite {
  role: InviteRole;
  created_at: uint64;
  from: uint64 = null;
  to_existing_user: uint64 = null;
  to_email: string;
  to_external_user: string;
  board: uint64 = null;
  accepted: bool = false;
  accepted_at: uint64 = null;
}

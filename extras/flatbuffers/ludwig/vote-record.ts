// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

import { Vote } from '../ludwig/vote.ts';


export class VoteRecord {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):VoteRecord {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsVoteRecord(bb:flatbuffers.ByteBuffer, obj?:VoteRecord):VoteRecord {
  return (obj || new VoteRecord()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsVoteRecord(bb:flatbuffers.ByteBuffer, obj?:VoteRecord):VoteRecord {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VoteRecord()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

post():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

vote():Vote {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Vote.NoVote;
}

static startVoteRecord(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPost(builder:flatbuffers.Builder, post:bigint) {
  builder.addFieldInt64(0, post, BigInt('0'));
}

static addVote(builder:flatbuffers.Builder, vote:Vote) {
  builder.addFieldInt8(1, vote, Vote.NoVote);
}

static endVoteRecord(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createVoteRecord(builder:flatbuffers.Builder, post:bigint, vote:Vote):flatbuffers.Offset {
  VoteRecord.startVoteRecord(builder);
  VoteRecord.addPost(builder, post);
  VoteRecord.addVote(builder, vote);
  return VoteRecord.endVoteRecord(builder);
}
}

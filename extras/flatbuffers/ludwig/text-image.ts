// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

export class TextImage {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TextImage {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTextImage(bb:flatbuffers.ByteBuffer, obj?:TextImage):TextImage {
  return (obj || new TextImage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTextImage(bb:flatbuffers.ByteBuffer, obj?:TextImage):TextImage {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TextImage()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

src():string|null
src(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
src(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

alt():string|null
alt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
alt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startTextImage(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSrc(builder:flatbuffers.Builder, srcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, srcOffset, 0);
}

static addAlt(builder:flatbuffers.Builder, altOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, altOffset, 0);
}

static endTextImage(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // src
  return offset;
}

static createTextImage(builder:flatbuffers.Builder, srcOffset:flatbuffers.Offset, altOffset:flatbuffers.Offset):flatbuffers.Offset {
  TextImage.startTextImage(builder);
  TextImage.addSrc(builder, srcOffset);
  TextImage.addAlt(builder, altOffset);
  return TextImage.endTextImage(builder);
}
}

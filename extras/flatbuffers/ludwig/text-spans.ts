// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

import { TextSpan, unionToTextSpan, unionListToTextSpan } from '../ludwig/text-span.ts';


export class TextSpans {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TextSpans {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTextSpans(bb:flatbuffers.ByteBuffer, obj?:TextSpans):TextSpans {
  return (obj || new TextSpans()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTextSpans(bb:flatbuffers.ByteBuffer, obj?:TextSpans):TextSpans {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TextSpans()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

spansType(index: number):TextSpan|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

spansTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

spansTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

spans(index: number, obj:any|string):any|string|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union_with_string(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

spansLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTextSpans(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSpansType(builder:flatbuffers.Builder, spansTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, spansTypeOffset, 0);
}

static createSpansTypeVector(builder:flatbuffers.Builder, data:TextSpan[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startSpansTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addSpans(builder:flatbuffers.Builder, spansOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, spansOffset, 0);
}

static createSpansVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSpansVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endTextSpans(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // spans_type
  builder.requiredField(offset, 6) // spans
  return offset;
}

static createTextSpans(builder:flatbuffers.Builder, spansTypeOffset:flatbuffers.Offset, spansOffset:flatbuffers.Offset):flatbuffers.Offset {
  TextSpans.startTextSpans(builder);
  TextSpans.addSpansType(builder, spansTypeOffset);
  TextSpans.addSpans(builder, spansOffset);
  return TextSpans.endTextSpans(builder);
}
}

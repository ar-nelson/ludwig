// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

export class SettingRecord {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SettingRecord {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSettingRecord(bb:flatbuffers.ByteBuffer, obj?:SettingRecord):SettingRecord {
  return (obj || new SettingRecord()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSettingRecord(bb:flatbuffers.ByteBuffer, obj?:SettingRecord):SettingRecord {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SettingRecord()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

key():string|null
key(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
key(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

valueInt():bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : null;
}

valueStr():string|null
valueStr(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
valueStr(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSettingRecord(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addKey(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, keyOffset, 0);
}

static addValueInt(builder:flatbuffers.Builder, valueInt:bigint) {
  builder.addFieldInt64(1, valueInt, BigInt(0));
}

static addValueStr(builder:flatbuffers.Builder, valueStrOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, valueStrOffset, 0);
}

static endSettingRecord(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // key
  return offset;
}

static createSettingRecord(builder:flatbuffers.Builder, keyOffset:flatbuffers.Offset, valueInt:bigint|null, valueStrOffset:flatbuffers.Offset):flatbuffers.Offset {
  SettingRecord.startSettingRecord(builder);
  SettingRecord.addKey(builder, keyOffset);
  if (valueInt !== null)
    SettingRecord.addValueInt(builder, valueInt);
  SettingRecord.addValueStr(builder, valueStrOffset);
  return SettingRecord.endSettingRecord(builder);
}
}

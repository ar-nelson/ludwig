// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

import { MediaCategory } from '../ludwig/media-category.ts';


export class LinkCard {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):LinkCard {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsLinkCard(bb:flatbuffers.ByteBuffer, obj?:LinkCard):LinkCard {
  return (obj || new LinkCard()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsLinkCard(bb:flatbuffers.ByteBuffer, obj?:LinkCard):LinkCard {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LinkCard()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fetchComplete():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

fetchTries():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

lastFetchAt():bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : null;
}

mediaCategory():MediaCategory|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : null;
}

title():string|null
title(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
title(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

imageUrl():string|null
imageUrl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
imageUrl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startLinkCard(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addFetchComplete(builder:flatbuffers.Builder, fetchComplete:boolean) {
  builder.addFieldInt8(0, +fetchComplete, +false);
}

static addFetchTries(builder:flatbuffers.Builder, fetchTries:number) {
  builder.addFieldInt8(1, fetchTries, 0);
}

static addLastFetchAt(builder:flatbuffers.Builder, lastFetchAt:bigint) {
  builder.addFieldInt64(2, lastFetchAt, null);
}

static addMediaCategory(builder:flatbuffers.Builder, mediaCategory:MediaCategory) {
  builder.addFieldInt8(3, mediaCategory, null);
}

static addTitle(builder:flatbuffers.Builder, titleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, titleOffset, 0);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, descriptionOffset, 0);
}

static addImageUrl(builder:flatbuffers.Builder, imageUrlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, imageUrlOffset, 0);
}

static endLinkCard(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createLinkCard(builder:flatbuffers.Builder, fetchComplete:boolean, fetchTries:number, lastFetchAt:bigint|null, mediaCategory:MediaCategory|null, titleOffset:flatbuffers.Offset, descriptionOffset:flatbuffers.Offset, imageUrlOffset:flatbuffers.Offset):flatbuffers.Offset {
  LinkCard.startLinkCard(builder);
  LinkCard.addFetchComplete(builder, fetchComplete);
  LinkCard.addFetchTries(builder, fetchTries);
  if (lastFetchAt !== null)
    LinkCard.addLastFetchAt(builder, lastFetchAt);
  if (mediaCategory !== null)
    LinkCard.addMediaCategory(builder, mediaCategory);
  LinkCard.addTitle(builder, titleOffset);
  LinkCard.addDescription(builder, descriptionOffset);
  LinkCard.addImageUrl(builder, imageUrlOffset);
  return LinkCard.endLinkCard(builder);
}
}

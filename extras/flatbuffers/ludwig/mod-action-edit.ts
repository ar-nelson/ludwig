// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

export class ModActionEdit {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ModActionEdit {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsModActionEdit(bb:flatbuffers.ByteBuffer, obj?:ModActionEdit):ModActionEdit {
  return (obj || new ModActionEdit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsModActionEdit(bb:flatbuffers.ByteBuffer, obj?:ModActionEdit):ModActionEdit {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ModActionEdit()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

oldValue():string|null
oldValue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
oldValue(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

newValue():string|null
newValue(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
newValue(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startModActionEdit(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addOldValue(builder:flatbuffers.Builder, oldValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, oldValueOffset, 0);
}

static addNewValue(builder:flatbuffers.Builder, newValueOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, newValueOffset, 0);
}

static endModActionEdit(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createModActionEdit(builder:flatbuffers.Builder, oldValueOffset:flatbuffers.Offset, newValueOffset:flatbuffers.Offset):flatbuffers.Offset {
  ModActionEdit.startModActionEdit(builder);
  ModActionEdit.addOldValue(builder, oldValueOffset);
  ModActionEdit.addNewValue(builder, newValueOffset);
  return ModActionEdit.endModActionEdit(builder);
}
}

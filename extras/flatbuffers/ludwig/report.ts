// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

export class Report {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Report {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsReport(bb:flatbuffers.ByteBuffer, obj?:Report):Report {
  return (obj || new Report()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsReport(bb:flatbuffers.ByteBuffer, obj?:Report):Report {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Report()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

post():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

author():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

createdAt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

content():string|null
content(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
content(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startReport(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addPost(builder:flatbuffers.Builder, post:bigint) {
  builder.addFieldInt64(0, post, BigInt('0'));
}

static addAuthor(builder:flatbuffers.Builder, author:bigint) {
  builder.addFieldInt64(1, author, BigInt('0'));
}

static addCreatedAt(builder:flatbuffers.Builder, createdAt:bigint) {
  builder.addFieldInt64(2, createdAt, BigInt('0'));
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, contentOffset, 0);
}

static endReport(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createReport(builder:flatbuffers.Builder, post:bigint, author:bigint, createdAt:bigint, contentOffset:flatbuffers.Offset):flatbuffers.Offset {
  Report.startReport(builder);
  Report.addPost(builder, post);
  Report.addAuthor(builder, author);
  Report.addCreatedAt(builder, createdAt);
  Report.addContent(builder, contentOffset);
  return Report.endReport(builder);
}
}

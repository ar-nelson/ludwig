// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

export class Session {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Session {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSession(bb:flatbuffers.ByteBuffer, obj?:Session):Session {
  return (obj || new Session()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSession(bb:flatbuffers.ByteBuffer, obj?:Session):Session {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Session()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

user():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

ip():string|null
ip(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ip(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

userAgent():string|null
userAgent(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userAgent(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

createdAt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

expiresAt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

remember():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startSession(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addUser(builder:flatbuffers.Builder, user:bigint) {
  builder.addFieldInt64(0, user, BigInt('0'));
}

static addIp(builder:flatbuffers.Builder, ipOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ipOffset, 0);
}

static addUserAgent(builder:flatbuffers.Builder, userAgentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, userAgentOffset, 0);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAt:bigint) {
  builder.addFieldInt64(3, createdAt, BigInt('0'));
}

static addExpiresAt(builder:flatbuffers.Builder, expiresAt:bigint) {
  builder.addFieldInt64(4, expiresAt, BigInt('0'));
}

static addRemember(builder:flatbuffers.Builder, remember:boolean) {
  builder.addFieldInt8(5, +remember, +false);
}

static endSession(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSession(builder:flatbuffers.Builder, user:bigint, ipOffset:flatbuffers.Offset, userAgentOffset:flatbuffers.Offset, createdAt:bigint, expiresAt:bigint, remember:boolean):flatbuffers.Offset {
  Session.startSession(builder);
  Session.addUser(builder, user);
  Session.addIp(builder, ipOffset);
  Session.addUserAgent(builder, userAgentOffset);
  Session.addCreatedAt(builder, createdAt);
  Session.addExpiresAt(builder, expiresAt);
  Session.addRemember(builder, remember);
  return Session.endSession(builder);
}
}

// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

export class EmojiShortcode {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EmojiShortcode {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEmojiShortcode(bb:flatbuffers.ByteBuffer, obj?:EmojiShortcode):EmojiShortcode {
  return (obj || new EmojiShortcode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEmojiShortcode(bb:flatbuffers.ByteBuffer, obj?:EmojiShortcode):EmojiShortcode {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EmojiShortcode()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

emoji():string|null
emoji(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
emoji(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

shortcodes(index: number):string
shortcodes(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
shortcodes(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

shortcodesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startEmojiShortcode(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addEmoji(builder:flatbuffers.Builder, emojiOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, emojiOffset, 0);
}

static addShortcodes(builder:flatbuffers.Builder, shortcodesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, shortcodesOffset, 0);
}

static createShortcodesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startShortcodesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endEmojiShortcode(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // emoji
  return offset;
}

static createEmojiShortcode(builder:flatbuffers.Builder, emojiOffset:flatbuffers.Offset, shortcodesOffset:flatbuffers.Offset):flatbuffers.Offset {
  EmojiShortcode.startEmojiShortcode(builder);
  EmojiShortcode.addEmoji(builder, emojiOffset);
  EmojiShortcode.addShortcodes(builder, shortcodesOffset);
  return EmojiShortcode.endEmojiShortcode(builder);
}
}

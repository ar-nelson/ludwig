// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

import { ModState } from '../ludwig/mod-state.ts';
import { RichText, unionToRichText, unionListToRichText } from '../ludwig/rich-text.ts';


export class Thread {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Thread {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsThread(bb:flatbuffers.ByteBuffer, obj?:Thread):Thread {
  return (obj || new Thread()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsThread(bb:flatbuffers.ByteBuffer, obj?:Thread):Thread {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Thread()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

author():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

board():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

titleType(index: number):RichText|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

titleTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

titleTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

title(index: number, obj:any|string):any|string|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union_with_string(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

titleLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

createdAt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

updatedAt():bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : null;
}

fetchedAt():bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : null;
}

deletedAt():bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : null;
}

instance():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

salt():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

activityUrl():string|null
activityUrl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
activityUrl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

originalPostUrl():string|null
originalPostUrl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
originalPostUrl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

contentUrl():string|null
contentUrl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
contentUrl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

contentTextRaw():string|null
contentTextRaw(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
contentTextRaw(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

contentTextType(index: number):RichText|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

contentTextTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

contentTextTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

contentText(index: number, obj:any|string):any|string|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__union_with_string(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

contentTextLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

contentWarning():string|null
contentWarning(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
contentWarning(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

featured():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

modState():ModState {
  const offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ModState.Normal;
}

modReason():string|null
modReason(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
modReason(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 42);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

boardModState():ModState {
  const offset = this.bb!.__offset(this.bb_pos, 44);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ModState.Normal;
}

boardModReason():string|null
boardModReason(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
boardModReason(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 46);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startThread(builder:flatbuffers.Builder) {
  builder.startObject(22);
}

static addAuthor(builder:flatbuffers.Builder, author:bigint) {
  builder.addFieldInt64(0, author, BigInt('0'));
}

static addBoard(builder:flatbuffers.Builder, board:bigint) {
  builder.addFieldInt64(1, board, BigInt('0'));
}

static addTitleType(builder:flatbuffers.Builder, titleTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, titleTypeOffset, 0);
}

static createTitleTypeVector(builder:flatbuffers.Builder, data:RichText[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startTitleTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addTitle(builder:flatbuffers.Builder, titleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, titleOffset, 0);
}

static createTitleVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startTitleVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAt:bigint) {
  builder.addFieldInt64(4, createdAt, BigInt('0'));
}

static addUpdatedAt(builder:flatbuffers.Builder, updatedAt:bigint) {
  builder.addFieldInt64(5, updatedAt, null);
}

static addFetchedAt(builder:flatbuffers.Builder, fetchedAt:bigint) {
  builder.addFieldInt64(6, fetchedAt, null);
}

static addDeletedAt(builder:flatbuffers.Builder, deletedAt:bigint) {
  builder.addFieldInt64(7, deletedAt, null);
}

static addInstance(builder:flatbuffers.Builder, instance:bigint) {
  builder.addFieldInt64(8, instance, BigInt('0'));
}

static addSalt(builder:flatbuffers.Builder, salt:number) {
  builder.addFieldInt32(9, salt, 0);
}

static addActivityUrl(builder:flatbuffers.Builder, activityUrlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, activityUrlOffset, 0);
}

static addOriginalPostUrl(builder:flatbuffers.Builder, originalPostUrlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, originalPostUrlOffset, 0);
}

static addContentUrl(builder:flatbuffers.Builder, contentUrlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, contentUrlOffset, 0);
}

static addContentTextRaw(builder:flatbuffers.Builder, contentTextRawOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, contentTextRawOffset, 0);
}

static addContentTextType(builder:flatbuffers.Builder, contentTextTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, contentTextTypeOffset, 0);
}

static createContentTextTypeVector(builder:flatbuffers.Builder, data:RichText[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startContentTextTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addContentText(builder:flatbuffers.Builder, contentTextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, contentTextOffset, 0);
}

static createContentTextVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startContentTextVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addContentWarning(builder:flatbuffers.Builder, contentWarningOffset:flatbuffers.Offset) {
  builder.addFieldOffset(16, contentWarningOffset, 0);
}

static addFeatured(builder:flatbuffers.Builder, featured:boolean) {
  builder.addFieldInt8(17, +featured, +false);
}

static addModState(builder:flatbuffers.Builder, modState:ModState) {
  builder.addFieldInt8(18, modState, ModState.Normal);
}

static addModReason(builder:flatbuffers.Builder, modReasonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(19, modReasonOffset, 0);
}

static addBoardModState(builder:flatbuffers.Builder, boardModState:ModState) {
  builder.addFieldInt8(20, boardModState, ModState.Normal);
}

static addBoardModReason(builder:flatbuffers.Builder, boardModReasonOffset:flatbuffers.Offset) {
  builder.addFieldOffset(21, boardModReasonOffset, 0);
}

static endThread(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createThread(builder:flatbuffers.Builder, author:bigint, board:bigint, titleTypeOffset:flatbuffers.Offset, titleOffset:flatbuffers.Offset, createdAt:bigint, updatedAt:bigint|null, fetchedAt:bigint|null, deletedAt:bigint|null, instance:bigint, salt:number, activityUrlOffset:flatbuffers.Offset, originalPostUrlOffset:flatbuffers.Offset, contentUrlOffset:flatbuffers.Offset, contentTextRawOffset:flatbuffers.Offset, contentTextTypeOffset:flatbuffers.Offset, contentTextOffset:flatbuffers.Offset, contentWarningOffset:flatbuffers.Offset, featured:boolean, modState:ModState, modReasonOffset:flatbuffers.Offset, boardModState:ModState, boardModReasonOffset:flatbuffers.Offset):flatbuffers.Offset {
  Thread.startThread(builder);
  Thread.addAuthor(builder, author);
  Thread.addBoard(builder, board);
  Thread.addTitleType(builder, titleTypeOffset);
  Thread.addTitle(builder, titleOffset);
  Thread.addCreatedAt(builder, createdAt);
  if (updatedAt !== null)
    Thread.addUpdatedAt(builder, updatedAt);
  if (fetchedAt !== null)
    Thread.addFetchedAt(builder, fetchedAt);
  if (deletedAt !== null)
    Thread.addDeletedAt(builder, deletedAt);
  Thread.addInstance(builder, instance);
  Thread.addSalt(builder, salt);
  Thread.addActivityUrl(builder, activityUrlOffset);
  Thread.addOriginalPostUrl(builder, originalPostUrlOffset);
  Thread.addContentUrl(builder, contentUrlOffset);
  Thread.addContentTextRaw(builder, contentTextRawOffset);
  Thread.addContentTextType(builder, contentTextTypeOffset);
  Thread.addContentText(builder, contentTextOffset);
  Thread.addContentWarning(builder, contentWarningOffset);
  Thread.addFeatured(builder, featured);
  Thread.addModState(builder, modState);
  Thread.addModReason(builder, modReasonOffset);
  Thread.addBoardModState(builder, boardModState);
  Thread.addBoardModReason(builder, boardModReasonOffset);
  return Thread.endThread(builder);
}
}

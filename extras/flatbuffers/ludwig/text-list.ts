// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

import { TextBlocks } from '../ludwig/text-blocks.ts';


export class TextList {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TextList {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTextList(bb:flatbuffers.ByteBuffer, obj?:TextList):TextList {
  return (obj || new TextList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTextList(bb:flatbuffers.ByteBuffer, obj?:TextList):TextList {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TextList()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

items(index: number, obj?:TextBlocks):TextBlocks|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TextBlocks()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

itemsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTextList(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addItems(builder:flatbuffers.Builder, itemsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, itemsOffset, 0);
}

static createItemsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startItemsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endTextList(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // items
  return offset;
}

static createTextList(builder:flatbuffers.Builder, itemsOffset:flatbuffers.Offset):flatbuffers.Offset {
  TextList.startTextList(builder);
  TextList.addItems(builder, itemsOffset);
  return TextList.endTextList(builder);
}
}

// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

export class Invite {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Invite {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsInvite(bb:flatbuffers.ByteBuffer, obj?:Invite):Invite {
  return (obj || new Invite()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsInvite(bb:flatbuffers.ByteBuffer, obj?:Invite):Invite {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Invite()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

createdAt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

expiresAt():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

from():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

acceptedAt():bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : null;
}

to():bigint|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : null;
}

static startInvite(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addCreatedAt(builder:flatbuffers.Builder, createdAt:bigint) {
  builder.addFieldInt64(0, createdAt, BigInt('0'));
}

static addExpiresAt(builder:flatbuffers.Builder, expiresAt:bigint) {
  builder.addFieldInt64(1, expiresAt, BigInt('0'));
}

static addFrom(builder:flatbuffers.Builder, from:bigint) {
  builder.addFieldInt64(2, from, BigInt('0'));
}

static addAcceptedAt(builder:flatbuffers.Builder, acceptedAt:bigint) {
  builder.addFieldInt64(3, acceptedAt, BigInt(0));
}

static addTo(builder:flatbuffers.Builder, to:bigint) {
  builder.addFieldInt64(4, to, BigInt(0));
}

static endInvite(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createInvite(builder:flatbuffers.Builder, createdAt:bigint, expiresAt:bigint, from:bigint, acceptedAt:bigint|null, to:bigint|null):flatbuffers.Offset {
  Invite.startInvite(builder);
  Invite.addCreatedAt(builder, createdAt);
  Invite.addExpiresAt(builder, expiresAt);
  Invite.addFrom(builder, from);
  if (acceptedAt !== null)
    Invite.addAcceptedAt(builder, acceptedAt);
  if (to !== null)
    Invite.addTo(builder, to);
  return Invite.endInvite(builder);
}
}

// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

import { TextBlock, unionToTextBlock, unionListToTextBlock } from '../ludwig/text-block.ts';


export class TextBlocks {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TextBlocks {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTextBlocks(bb:flatbuffers.ByteBuffer, obj?:TextBlocks):TextBlocks {
  return (obj || new TextBlocks()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTextBlocks(bb:flatbuffers.ByteBuffer, obj?:TextBlocks):TextBlocks {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TextBlocks()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

blocksType(index: number):TextBlock|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

blocksTypeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

blocksTypeArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

blocks(index: number, obj:any|string):any|string|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union_with_string(obj, this.bb!.__vector(this.bb_pos + offset) + index * 4) : null;
}

blocksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startTextBlocks(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addBlocksType(builder:flatbuffers.Builder, blocksTypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, blocksTypeOffset, 0);
}

static createBlocksTypeVector(builder:flatbuffers.Builder, data:TextBlock[]):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startBlocksTypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addBlocks(builder:flatbuffers.Builder, blocksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, blocksOffset, 0);
}

static createBlocksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBlocksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endTextBlocks(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // blocks_type
  builder.requiredField(offset, 6) // blocks
  return offset;
}

static createTextBlocks(builder:flatbuffers.Builder, blocksTypeOffset:flatbuffers.Offset, blocksOffset:flatbuffers.Offset):flatbuffers.Offset {
  TextBlocks.startTextBlocks(builder);
  TextBlocks.addBlocksType(builder, blocksTypeOffset);
  TextBlocks.addBlocks(builder, blocksOffset);
  return TextBlocks.endTextBlocks(builder);
}
}

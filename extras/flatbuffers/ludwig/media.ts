// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

import { MediaCategory } from '../ludwig/media-category.ts';


export class Media {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Media {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMedia(bb:flatbuffers.ByteBuffer, obj?:Media):Media {
  return (obj || new Media()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMedia(bb:flatbuffers.ByteBuffer, obj?:Media):Media {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Media()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

category():MediaCategory {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : MediaCategory.Image;
}

mimetype():string|null
mimetype(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
mimetype(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

alt():string|null
alt(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
alt(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

blurhash():string|null
blurhash(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
blurhash(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startMedia(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addCategory(builder:flatbuffers.Builder, category:MediaCategory) {
  builder.addFieldInt8(0, category, MediaCategory.Image);
}

static addMimetype(builder:flatbuffers.Builder, mimetypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, mimetypeOffset, 0);
}

static addAlt(builder:flatbuffers.Builder, altOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, altOffset, 0);
}

static addBlurhash(builder:flatbuffers.Builder, blurhashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, blurhashOffset, 0);
}

static endMedia(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMedia(builder:flatbuffers.Builder, category:MediaCategory, mimetypeOffset:flatbuffers.Offset, altOffset:flatbuffers.Offset, blurhashOffset:flatbuffers.Offset):flatbuffers.Offset {
  Media.startMedia(builder);
  Media.addCategory(builder, category);
  Media.addMimetype(builder, mimetypeOffset);
  Media.addAlt(builder, altOffset);
  Media.addBlurhash(builder, blurhashOffset);
  return Media.endMedia(builder);
}
}

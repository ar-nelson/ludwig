// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

export class SiteStats {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SiteStats {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSiteStats(bb:flatbuffers.ByteBuffer, obj?:SiteStats):SiteStats {
  return (obj || new SiteStats()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSiteStats(bb:flatbuffers.ByteBuffer, obj?:SiteStats):SiteStats {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SiteStats()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

userCount():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

boardCount():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

threadCount():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

commentCount():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startSiteStats(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addUserCount(builder:flatbuffers.Builder, userCount:bigint) {
  builder.addFieldInt64(0, userCount, BigInt('0'));
}

static addBoardCount(builder:flatbuffers.Builder, boardCount:bigint) {
  builder.addFieldInt64(1, boardCount, BigInt('0'));
}

static addThreadCount(builder:flatbuffers.Builder, threadCount:bigint) {
  builder.addFieldInt64(2, threadCount, BigInt('0'));
}

static addCommentCount(builder:flatbuffers.Builder, commentCount:bigint) {
  builder.addFieldInt64(3, commentCount, BigInt('0'));
}

static endSiteStats(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSiteStats(builder:flatbuffers.Builder, userCount:bigint, boardCount:bigint, threadCount:bigint, commentCount:bigint):flatbuffers.Offset {
  SiteStats.startSiteStats(builder);
  SiteStats.addUserCount(builder, userCount);
  SiteStats.addBoardCount(builder, boardCount);
  SiteStats.addThreadCount(builder, threadCount);
  SiteStats.addCommentCount(builder, commentCount);
  return SiteStats.endSiteStats(builder);
}
}

// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

import { ModAction, unionToModAction, unionListToModAction } from '../ludwig/mod-action.ts';
import { ModActionTargetType } from '../ludwig/mod-action-target-type.ts';


export class ModActionRecord {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ModActionRecord {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsModActionRecord(bb:flatbuffers.ByteBuffer, obj?:ModActionRecord):ModActionRecord {
  return (obj || new ModActionRecord()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsModActionRecord(bb:flatbuffers.ByteBuffer, obj?:ModActionRecord):ModActionRecord {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ModActionRecord()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mod():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

timestamp():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

targetType():ModActionTargetType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : ModActionTargetType.User;
}

target():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

actionType():ModAction {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : ModAction.NONE;
}

action<T extends flatbuffers.Table>(obj:any):any|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
}

static startModActionRecord(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addMod(builder:flatbuffers.Builder, mod:bigint) {
  builder.addFieldInt64(0, mod, BigInt('0'));
}

static addTimestamp(builder:flatbuffers.Builder, timestamp:bigint) {
  builder.addFieldInt64(1, timestamp, BigInt('0'));
}

static addTargetType(builder:flatbuffers.Builder, targetType:ModActionTargetType) {
  builder.addFieldInt8(2, targetType, ModActionTargetType.User);
}

static addTarget(builder:flatbuffers.Builder, target:bigint) {
  builder.addFieldInt64(3, target, BigInt('0'));
}

static addActionType(builder:flatbuffers.Builder, actionType:ModAction) {
  builder.addFieldInt8(4, actionType, ModAction.NONE);
}

static addAction(builder:flatbuffers.Builder, actionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, actionOffset, 0);
}

static endModActionRecord(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 14) // action
  return offset;
}

static createModActionRecord(builder:flatbuffers.Builder, mod:bigint, timestamp:bigint, targetType:ModActionTargetType, target:bigint, actionType:ModAction, actionOffset:flatbuffers.Offset):flatbuffers.Offset {
  ModActionRecord.startModActionRecord(builder);
  ModActionRecord.addMod(builder, mod);
  ModActionRecord.addTimestamp(builder, timestamp);
  ModActionRecord.addTargetType(builder, targetType);
  ModActionRecord.addTarget(builder, target);
  ModActionRecord.addActionType(builder, actionType);
  ModActionRecord.addAction(builder, actionOffset);
  return ModActionRecord.endModActionRecord(builder);
}
}

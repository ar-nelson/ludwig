// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

export class UserStats {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):UserStats {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUserStats(bb:flatbuffers.ByteBuffer, obj?:UserStats):UserStats {
  return (obj || new UserStats()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUserStats(bb:flatbuffers.ByteBuffer, obj?:UserStats):UserStats {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UserStats()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

threadCount():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

commentCount():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

threadKarma():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

commentKarma():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

latestPostTime():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

latestPostId():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startUserStats(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addThreadCount(builder:flatbuffers.Builder, threadCount:bigint) {
  builder.addFieldInt64(0, threadCount, BigInt('0'));
}

static addCommentCount(builder:flatbuffers.Builder, commentCount:bigint) {
  builder.addFieldInt64(1, commentCount, BigInt('0'));
}

static addThreadKarma(builder:flatbuffers.Builder, threadKarma:bigint) {
  builder.addFieldInt64(2, threadKarma, BigInt('0'));
}

static addCommentKarma(builder:flatbuffers.Builder, commentKarma:bigint) {
  builder.addFieldInt64(3, commentKarma, BigInt('0'));
}

static addLatestPostTime(builder:flatbuffers.Builder, latestPostTime:bigint) {
  builder.addFieldInt64(4, latestPostTime, BigInt('0'));
}

static addLatestPostId(builder:flatbuffers.Builder, latestPostId:bigint) {
  builder.addFieldInt64(5, latestPostId, BigInt('0'));
}

static endUserStats(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createUserStats(builder:flatbuffers.Builder, threadCount:bigint, commentCount:bigint, threadKarma:bigint, commentKarma:bigint, latestPostTime:bigint, latestPostId:bigint):flatbuffers.Offset {
  UserStats.startUserStats(builder);
  UserStats.addThreadCount(builder, threadCount);
  UserStats.addCommentCount(builder, commentCount);
  UserStats.addThreadKarma(builder, threadKarma);
  UserStats.addCommentKarma(builder, commentKarma);
  UserStats.addLatestPostTime(builder, latestPostTime);
  UserStats.addLatestPostId(builder, latestPostId);
  return UserStats.endUserStats(builder);
}
}

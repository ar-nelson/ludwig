// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'npm:flatbuffers';

export class Application {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Application {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsApplication(bb:flatbuffers.ByteBuffer, obj?:Application):Application {
  return (obj || new Application()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsApplication(bb:flatbuffers.ByteBuffer, obj?:Application):Application {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Application()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

text():string|null
text(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
text(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

ip():string|null
ip(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ip(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

userAgent():string|null
userAgent(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userAgent(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startApplication(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addText(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, textOffset, 0);
}

static addIp(builder:flatbuffers.Builder, ipOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ipOffset, 0);
}

static addUserAgent(builder:flatbuffers.Builder, userAgentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, userAgentOffset, 0);
}

static endApplication(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // text
  return offset;
}

static createApplication(builder:flatbuffers.Builder, textOffset:flatbuffers.Offset, ipOffset:flatbuffers.Offset, userAgentOffset:flatbuffers.Offset):flatbuffers.Offset {
  Application.startApplication(builder);
  Application.addText(builder, textOffset);
  Application.addIp(builder, ipOffset);
  Application.addUserAgent(builder, userAgentOffset);
  return Application.endApplication(builder);
}
}
